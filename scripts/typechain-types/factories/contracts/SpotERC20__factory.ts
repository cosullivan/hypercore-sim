/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SpotERC20,
  SpotERC20Interface,
  L1Read,
} from "../../contracts/SpotERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "index",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint64[]",
            name: "spots",
            type: "uint64[]",
          },
          {
            internalType: "uint64",
            name: "deployerTradingFeeShare",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "deployer",
            type: "address",
          },
          {
            internalType: "address",
            name: "evmContract",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "szDecimals",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "weiDecimals",
            type: "uint8",
          },
          {
            internalType: "int8",
            name: "evmExtraWeiDecimals",
            type: "int8",
          },
        ],
        internalType: "struct L1Read.TokenInfo",
        name: "token",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523461050457610b608038038061001981610520565b9283398101906040818303126105045761003281610545565b602082015190916001600160401b038211610504570161010081840312610504576040519261010084016001600160401b038111858210176104085760405281516001600160401b03811161050457820181601f820112156105045780516001600160401b038111610408576100b1601f8201601f1916602001610520565b91818352836020838301011161050457815f9260208093018386015e83010152845260208201516001600160401b0381116105045782019080601f83011215610504578151916001600160401b038311610408578260051b90602080610118818501610520565b80968152019282010192831161050457602001905b828210610508575050506020840190815261014a60408301610545565b6040850190815261015d60608401610559565b906060860191825261017160808501610559565b926080870193845261018560a0860161056d565b9660a0810197885260e061019b60c0880161056d565b9660c08301978852015196875f0b88036105045760e082019788525f80546001600160401b0319166001600160401b03928316179055905180519182116104085760015490600182811c921680156104fa575b60208310146104e65781601f84931161048d575b50602090601f8311600114610427575f9261041c575b50508160011b915f199060031b1c1916176001555b518051906001600160401b0382116104085768010000000000000000821161040857602090600254836002558084106103bb575b50019060025f5260205f208160021c915f5b8381106103765750600319811690038061032d575b50509151600380549451600160401b600160e01b03604091821b166001600160401b039093166001600160e01b031990961695909517919091179055505090516004805495519351945160b01b60ff60b01b1660ff60a81b60a89690961b9590951660ff60a01b60a09590951b949094166001600160a01b039092166001600160b81b031990961695909517179190911791909117909155516105ce90816105928239f35b925f935f5b8181106103475750505001555f808080610288565b82516001600160401b03908116600683901b90811b91901b199096169590951794602090920191600101610332565b5f5f5b6004811061038e575083820155600101610273565b86519096916001916020916001600160401b0360068b901b81811b199092169216901b1792019601610379565b6103e99060025f52835f20600380870160021c820192601888831b16806103ef575b500160021c019061057b565b5f610261565b5f198501908154905f19908a03851b1c1690555f6103dd565b634e487b7160e01b5f52604160045260245ffd5b015190505f80610218565b60015f9081528281209350601f198516905b818110610475575090846001959493921061045d575b505050811b0160015561022d565b01515f1960f88460031b161c191690555f808061044f565b92936020600181928786015181550195019301610439565b60015f526104d6907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f850160051c810191602086106104dc575b601f0160051c019061057b565b5f610202565b90915081906104c9565b634e487b7160e01b5f52602260045260245ffd5b91607f16916101ee565b5f80fd5b6020809161051584610545565b81520191019061012d565b6040519190601f01601f191682016001600160401b0381118382101761040857604052565b51906001600160401b038216820361050457565b51906001600160a01b038216820361050457565b519060ff8216820361050457565b818110610586575050565b5f815560010161057b56fe60806040526004361015610011575f80fd5b5f3560e01c806306fdde031461028c578063095ea7b31461026757806318160ddd1461024a57806323b872dd1461021b578063313ce567146101c857806340c10f191461018057806370a082311461014857806395d89b41146101435780639dc29fac146100f6578063a9059cbb146100c45763dd62ed3e14610092575f80fd5b346100c05760403660031901126100c0576100ab6103a9565b506100b46103bf565b5060206040515f198152f35b5f80fd5b346100c05760403660031901126100c05760206100ec6100e26103a9565b6024359033610425565b6040519015158152f35b346100c05760403660031901126100c05761013e6101126103a9565b6024359060018060a01b03165f52600660205260405f2061013482825461040b565b905560055461040b565b600555005b61028c565b346100c05760203660031901126100c0576001600160a01b036101696103a9565b165f526006602052602060405f2054604051908152f35b346100c05760403660031901126100c05761013e61019c6103a9565b6024359060018060a01b03165f52600660205260405f206101be828254610418565b9055600554610418565b346100c0575f3660031901126100c05760045460ff8160b01c5f0b9160a81c165f0b01607f198112607f8213176102075760209060ff60405191168152f35b634e487b7160e01b5f52601160045260245ffd5b346100c05760603660031901126100c05760206100ec6102396103a9565b6102416103bf565b60443591610425565b346100c0575f3660031901126100c0576020600554604051908152f35b346100c05760403660031901126100c0576102806103a9565b50602060405160018152f35b346100c0575f3660031901126100c0576040515f90600154918260011c6001841693841561039f575b60208210851461038b5781845260208401949081156103705750600114610312575b50906102e78160409303826103d5565b8151928391602083525180918160208501528484015e5f828201840152601f01601f19168101030190f35b91905060015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6915f905b808210610356575090915081016020016102e76102d7565b91926001816020925483858801015201910190929161033e565b60ff1916855250151560051b820160200190506102e76102d7565b634e487b7160e01b5f52602260045260245ffd5b90607f16906102b5565b600435906001600160a01b03821682036100c057565b602435906001600160a01b03821682036100c057565b90601f8019910116810190811067ffffffffffffffff8211176103f757604052565b634e487b7160e01b5f52604160045260245ffd5b9190820391821161020757565b9190820180921161020757565b6001600160a01b03165f81815260066020526040902054909291908281106105325750825f52600660205260405f2061045f83825461040b565b905560018060a01b031691825f52600660205260405f20610481838254610418565b90555f5467ffffffffffffffff16926001600160a01b036104a18561054d565b16146104b0575b505050600190565b7333333333333333333333333333333333333333333b156100c057604051926320dc4f2560e21b84526004840152602483015260448201525f81606481837333333333333333333333333333333333333333335af1801561052757610517575b80806104a8565b5f610521916103d5565b5f610510565b6040513d5f823e3d90fd5b90508263391434e360e21b5f5260045260245260445260645ffd5b67ffffffffffffffff166096811461057f576001609d1b016001600160a01b038111610207576001600160a01b031690565b507322222222222222222222222222222222222222229056fea26469706673582212201ea25a9196577660a7d9ff92827916adad09feb160bd08f6baf4443ca57c2b1064736f6c634300081c0033";

type SpotERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SpotERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SpotERC20__factory extends ContractFactory {
  constructor(...args: SpotERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    index: BigNumberish,
    token: L1Read.TokenInfoStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(index, token, overrides || {});
  }
  override deploy(
    index: BigNumberish,
    token: L1Read.TokenInfoStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(index, token, overrides || {}) as Promise<
      SpotERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SpotERC20__factory {
    return super.connect(runner) as SpotERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SpotERC20Interface {
    return new Interface(_abi) as SpotERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): SpotERC20 {
    return new Contract(address, _abi, runner) as unknown as SpotERC20;
  }
}
