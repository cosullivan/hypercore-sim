/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface L1WriteInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "sendCDeposit"
      | "sendCWithdrawal"
      | "sendIocOrder"
      | "sendSpot"
      | "sendTokenDelegate"
      | "sendUsdClassTransfer"
      | "sendVaultTransfer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CDeposit"
      | "CWithdrawal"
      | "IocOrder"
      | "SpotSend"
      | "TokenDelegate"
      | "UsdClassTransfer"
      | "VaultTransfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "sendCDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendIocOrder",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendSpot",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTokenDelegate",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendUsdClassTransfer",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendVaultTransfer",
    values: [AddressLike, boolean, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "sendCDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendIocOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendSpot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendTokenDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendUsdClassTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendVaultTransfer",
    data: BytesLike
  ): Result;
}

export namespace CDepositEvent {
  export type InputTuple = [user: AddressLike, _wei: BigNumberish];
  export type OutputTuple = [user: string, _wei: bigint];
  export interface OutputObject {
    user: string;
    _wei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CWithdrawalEvent {
  export type InputTuple = [user: AddressLike, _wei: BigNumberish];
  export type OutputTuple = [user: string, _wei: bigint];
  export interface OutputObject {
    user: string;
    _wei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IocOrderEvent {
  export type InputTuple = [
    user: AddressLike,
    asset: BigNumberish,
    isBuy: boolean,
    limitPx: BigNumberish,
    sz: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    asset: bigint,
    isBuy: boolean,
    limitPx: bigint,
    sz: bigint
  ];
  export interface OutputObject {
    user: string;
    asset: bigint;
    isBuy: boolean;
    limitPx: bigint;
    sz: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpotSendEvent {
  export type InputTuple = [
    user: AddressLike,
    destination: AddressLike,
    token: BigNumberish,
    _wei: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    destination: string,
    token: bigint,
    _wei: bigint
  ];
  export interface OutputObject {
    user: string;
    destination: string;
    token: bigint;
    _wei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDelegateEvent {
  export type InputTuple = [
    user: AddressLike,
    validator: AddressLike,
    _wei: BigNumberish,
    isUndelegate: boolean
  ];
  export type OutputTuple = [
    user: string,
    validator: string,
    _wei: bigint,
    isUndelegate: boolean
  ];
  export interface OutputObject {
    user: string;
    validator: string;
    _wei: bigint;
    isUndelegate: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsdClassTransferEvent {
  export type InputTuple = [
    user: AddressLike,
    ntl: BigNumberish,
    toPerp: boolean
  ];
  export type OutputTuple = [user: string, ntl: bigint, toPerp: boolean];
  export interface OutputObject {
    user: string;
    ntl: bigint;
    toPerp: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultTransferEvent {
  export type InputTuple = [
    user: AddressLike,
    vault: AddressLike,
    isDeposit: boolean,
    usd: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    vault: string,
    isDeposit: boolean,
    usd: bigint
  ];
  export interface OutputObject {
    user: string;
    vault: string;
    isDeposit: boolean;
    usd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface L1Write extends BaseContract {
  connect(runner?: ContractRunner | null): L1Write;
  waitForDeployment(): Promise<this>;

  interface: L1WriteInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  sendCDeposit: TypedContractMethod<[_wei: BigNumberish], [void], "nonpayable">;

  sendCWithdrawal: TypedContractMethod<
    [_wei: BigNumberish],
    [void],
    "nonpayable"
  >;

  sendIocOrder: TypedContractMethod<
    [
      asset: BigNumberish,
      isBuy: boolean,
      limitPx: BigNumberish,
      sz: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  sendSpot: TypedContractMethod<
    [destination: AddressLike, token: BigNumberish, _wei: BigNumberish],
    [void],
    "nonpayable"
  >;

  sendTokenDelegate: TypedContractMethod<
    [validator: AddressLike, _wei: BigNumberish, isUndelegate: boolean],
    [void],
    "nonpayable"
  >;

  sendUsdClassTransfer: TypedContractMethod<
    [ntl: BigNumberish, toPerp: boolean],
    [void],
    "nonpayable"
  >;

  sendVaultTransfer: TypedContractMethod<
    [vault: AddressLike, isDeposit: boolean, usd: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "sendCDeposit"
  ): TypedContractMethod<[_wei: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendCWithdrawal"
  ): TypedContractMethod<[_wei: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendIocOrder"
  ): TypedContractMethod<
    [
      asset: BigNumberish,
      isBuy: boolean,
      limitPx: BigNumberish,
      sz: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendSpot"
  ): TypedContractMethod<
    [destination: AddressLike, token: BigNumberish, _wei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendTokenDelegate"
  ): TypedContractMethod<
    [validator: AddressLike, _wei: BigNumberish, isUndelegate: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendUsdClassTransfer"
  ): TypedContractMethod<
    [ntl: BigNumberish, toPerp: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendVaultTransfer"
  ): TypedContractMethod<
    [vault: AddressLike, isDeposit: boolean, usd: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CDeposit"
  ): TypedContractEvent<
    CDepositEvent.InputTuple,
    CDepositEvent.OutputTuple,
    CDepositEvent.OutputObject
  >;
  getEvent(
    key: "CWithdrawal"
  ): TypedContractEvent<
    CWithdrawalEvent.InputTuple,
    CWithdrawalEvent.OutputTuple,
    CWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "IocOrder"
  ): TypedContractEvent<
    IocOrderEvent.InputTuple,
    IocOrderEvent.OutputTuple,
    IocOrderEvent.OutputObject
  >;
  getEvent(
    key: "SpotSend"
  ): TypedContractEvent<
    SpotSendEvent.InputTuple,
    SpotSendEvent.OutputTuple,
    SpotSendEvent.OutputObject
  >;
  getEvent(
    key: "TokenDelegate"
  ): TypedContractEvent<
    TokenDelegateEvent.InputTuple,
    TokenDelegateEvent.OutputTuple,
    TokenDelegateEvent.OutputObject
  >;
  getEvent(
    key: "UsdClassTransfer"
  ): TypedContractEvent<
    UsdClassTransferEvent.InputTuple,
    UsdClassTransferEvent.OutputTuple,
    UsdClassTransferEvent.OutputObject
  >;
  getEvent(
    key: "VaultTransfer"
  ): TypedContractEvent<
    VaultTransferEvent.InputTuple,
    VaultTransferEvent.OutputTuple,
    VaultTransferEvent.OutputObject
  >;

  filters: {
    "CDeposit(address,uint64)": TypedContractEvent<
      CDepositEvent.InputTuple,
      CDepositEvent.OutputTuple,
      CDepositEvent.OutputObject
    >;
    CDeposit: TypedContractEvent<
      CDepositEvent.InputTuple,
      CDepositEvent.OutputTuple,
      CDepositEvent.OutputObject
    >;

    "CWithdrawal(address,uint64)": TypedContractEvent<
      CWithdrawalEvent.InputTuple,
      CWithdrawalEvent.OutputTuple,
      CWithdrawalEvent.OutputObject
    >;
    CWithdrawal: TypedContractEvent<
      CWithdrawalEvent.InputTuple,
      CWithdrawalEvent.OutputTuple,
      CWithdrawalEvent.OutputObject
    >;

    "IocOrder(address,uint32,bool,uint64,uint64)": TypedContractEvent<
      IocOrderEvent.InputTuple,
      IocOrderEvent.OutputTuple,
      IocOrderEvent.OutputObject
    >;
    IocOrder: TypedContractEvent<
      IocOrderEvent.InputTuple,
      IocOrderEvent.OutputTuple,
      IocOrderEvent.OutputObject
    >;

    "SpotSend(address,address,uint64,uint64)": TypedContractEvent<
      SpotSendEvent.InputTuple,
      SpotSendEvent.OutputTuple,
      SpotSendEvent.OutputObject
    >;
    SpotSend: TypedContractEvent<
      SpotSendEvent.InputTuple,
      SpotSendEvent.OutputTuple,
      SpotSendEvent.OutputObject
    >;

    "TokenDelegate(address,address,uint64,bool)": TypedContractEvent<
      TokenDelegateEvent.InputTuple,
      TokenDelegateEvent.OutputTuple,
      TokenDelegateEvent.OutputObject
    >;
    TokenDelegate: TypedContractEvent<
      TokenDelegateEvent.InputTuple,
      TokenDelegateEvent.OutputTuple,
      TokenDelegateEvent.OutputObject
    >;

    "UsdClassTransfer(address,uint64,bool)": TypedContractEvent<
      UsdClassTransferEvent.InputTuple,
      UsdClassTransferEvent.OutputTuple,
      UsdClassTransferEvent.OutputObject
    >;
    UsdClassTransfer: TypedContractEvent<
      UsdClassTransferEvent.InputTuple,
      UsdClassTransferEvent.OutputTuple,
      UsdClassTransferEvent.OutputObject
    >;

    "VaultTransfer(address,address,bool,uint64)": TypedContractEvent<
      VaultTransferEvent.InputTuple,
      VaultTransferEvent.OutputTuple,
      VaultTransferEvent.OutputObject
    >;
    VaultTransfer: TypedContractEvent<
      VaultTransferEvent.InputTuple,
      VaultTransferEvent.OutputTuple,
      VaultTransferEvent.OutputObject
    >;
  };
}
